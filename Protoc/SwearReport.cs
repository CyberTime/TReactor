// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace XReactor {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class SwearReport {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_XReactor_SwearReport__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::XReactor.SwearReport, global::XReactor.SwearReport.Builder> internal__static_XReactor_SwearReport__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static SwearReport() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChFTd2VhclJlcG9ydC5wcm90bxIIWFJlYWN0b3IiPwoLU3dlYXJSZXBvcnQS" + 
            "EAoIR2FtZU5hbWUYASACKAkSDAoEVXNlchgCIAIoCRIQCghHYW1lQ2hhdBgD" + 
            "IAMoCUICSAE=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_XReactor_SwearReport__Descriptor = Descriptor.MessageTypes[0];
          internal__static_XReactor_SwearReport__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::XReactor.SwearReport, global::XReactor.SwearReport.Builder>(internal__static_XReactor_SwearReport__Descriptor,
                  new string[] { "GameName", "User", "GameChat", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SwearReport : pb::GeneratedMessage<SwearReport, SwearReport.Builder> {
    private SwearReport() { }
    private static readonly SwearReport defaultInstance = new SwearReport().MakeReadOnly();
    private static readonly string[] _swearReportFieldNames = new string[] { "GameChat", "GameName", "User" };
    private static readonly uint[] _swearReportFieldTags = new uint[] { 26, 10, 18 };
    public static SwearReport DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SwearReport DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SwearReport ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::XReactor.Proto.SwearReport.internal__static_XReactor_SwearReport__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SwearReport, SwearReport.Builder> InternalFieldAccessors {
      get { return global::XReactor.Proto.SwearReport.internal__static_XReactor_SwearReport__FieldAccessorTable; }
    }
    
    public const int GameNameFieldNumber = 1;
    private bool hasGameName;
    private string gameName_ = "";
    public bool HasGameName {
      get { return hasGameName; }
    }
    public string GameName {
      get { return gameName_; }
    }
    
    public const int UserFieldNumber = 2;
    private bool hasUser;
    private string user_ = "";
    public bool HasUser {
      get { return hasUser; }
    }
    public string User {
      get { return user_; }
    }
    
    public const int GameChatFieldNumber = 3;
    private pbc::PopsicleList<string> gameChat_ = new pbc::PopsicleList<string>();
    public scg::IList<string> GameChatList {
      get { return pbc::Lists.AsReadOnly(gameChat_); }
    }
    public int GameChatCount {
      get { return gameChat_.Count; }
    }
    public string GetGameChat(int index) {
      return gameChat_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameName) return false;
        if (!hasUser) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _swearReportFieldNames;
      if (hasGameName) {
        output.WriteString(1, field_names[1], GameName);
      }
      if (hasUser) {
        output.WriteString(2, field_names[2], User);
      }
      if (gameChat_.Count > 0) {
        output.WriteStringArray(3, field_names[0], gameChat_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GameName);
        }
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeStringSize(2, User);
        }
        {
          int dataSize = 0;
          foreach (string element in GameChatList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * gameChat_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SwearReport ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SwearReport ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SwearReport ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SwearReport ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SwearReport ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SwearReport ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SwearReport ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SwearReport ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SwearReport ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SwearReport ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SwearReport MakeReadOnly() {
      gameChat_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SwearReport prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SwearReport, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SwearReport cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SwearReport result;
      
      private SwearReport PrepareBuilder() {
        if (resultIsReadOnly) {
          SwearReport original = result;
          result = new SwearReport();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SwearReport MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::XReactor.SwearReport.Descriptor; }
      }
      
      public override SwearReport DefaultInstanceForType {
        get { return global::XReactor.SwearReport.DefaultInstance; }
      }
      
      public override SwearReport BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SwearReport) {
          return MergeFrom((SwearReport) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SwearReport other) {
        if (other == global::XReactor.SwearReport.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameName) {
          GameName = other.GameName;
        }
        if (other.HasUser) {
          User = other.User;
        }
        if (other.gameChat_.Count != 0) {
          result.gameChat_.Add(other.gameChat_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_swearReportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _swearReportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGameName = input.ReadString(ref result.gameName_);
              break;
            }
            case 18: {
              result.hasUser = input.ReadString(ref result.user_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.gameChat_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameName {
        get { return result.hasGameName; }
      }
      public string GameName {
        get { return result.GameName; }
        set { SetGameName(value); }
      }
      public Builder SetGameName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameName = true;
        result.gameName_ = value;
        return this;
      }
      public Builder ClearGameName() {
        PrepareBuilder();
        result.hasGameName = false;
        result.gameName_ = "";
        return this;
      }
      
      public bool HasUser {
        get { return result.hasUser; }
      }
      public string User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> GameChatList {
        get { return PrepareBuilder().gameChat_; }
      }
      public int GameChatCount {
        get { return result.GameChatCount; }
      }
      public string GetGameChat(int index) {
        return result.GetGameChat(index);
      }
      public Builder SetGameChat(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.gameChat_[index] = value;
        return this;
      }
      public Builder AddGameChat(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.gameChat_.Add(value);
        return this;
      }
      public Builder AddRangeGameChat(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.gameChat_.Add(values);
        return this;
      }
      public Builder ClearGameChat() {
        PrepareBuilder();
        result.gameChat_.Clear();
        return this;
      }
    }
    static SwearReport() {
      object.ReferenceEquals(global::XReactor.Proto.SwearReport.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
