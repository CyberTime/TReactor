// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace XReactor {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class GamePermRequest {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_XReactor_GamePermRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::XReactor.GamePermRequest, global::XReactor.GamePermRequest.Builder> internal__static_XReactor_GamePermRequest__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static GamePermRequest() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChVHYW1lUGVybVJlcXVlc3QucHJvdG8SCFhSZWFjdG9yIkwKD0dhbWVQZXJt" + 
            "UmVxdWVzdBIkCghHYW1ldHlwZRgBIAIoDjISLlhSZWFjdG9yLkdhbWVUeXBl" + 
            "EhMKC0dhbWV2ZXJzaW9uGAIgASgJKksKCEdhbWVUeXBlEg8KC1dBUkNSQUZU" + 
            "SUlJEAESCQoFRE9UQTIQAhILCgdDT1VOVEVSEAMSBwoDV09XEAQSDQoJU1RB" + 
            "UkNSQUZUEAVCAkgB");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_XReactor_GamePermRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_XReactor_GamePermRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::XReactor.GamePermRequest, global::XReactor.GamePermRequest.Builder>(internal__static_XReactor_GamePermRequest__Descriptor,
                  new string[] { "Gametype", "Gameversion", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Enums

  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GamePermRequest : pb::GeneratedMessage<GamePermRequest, GamePermRequest.Builder> {
    private GamePermRequest() { }
    private static readonly GamePermRequest defaultInstance = new GamePermRequest().MakeReadOnly();
    private static readonly string[] _gamePermRequestFieldNames = new string[] { "Gametype", "Gameversion" };
    private static readonly uint[] _gamePermRequestFieldTags = new uint[] { 8, 18 };
    public static GamePermRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GamePermRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GamePermRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::XReactor.Proto.GamePermRequest.internal__static_XReactor_GamePermRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GamePermRequest, GamePermRequest.Builder> InternalFieldAccessors {
      get { return global::XReactor.Proto.GamePermRequest.internal__static_XReactor_GamePermRequest__FieldAccessorTable; }
    }
    
    public const int GametypeFieldNumber = 1;
    private bool hasGametype;
    private global::XReactor.GameType gametype_ = global::XReactor.GameType.WARCRAFTIII;
    public bool HasGametype {
      get { return hasGametype; }
    }
    public global::XReactor.GameType Gametype {
      get { return gametype_; }
    }
    
    public const int GameversionFieldNumber = 2;
    private bool hasGameversion;
    private string gameversion_ = "";
    public bool HasGameversion {
      get { return hasGameversion; }
    }
    public string Gameversion {
      get { return gameversion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGametype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gamePermRequestFieldNames;
      if (hasGametype) {
        output.WriteEnum(1, field_names[0], (int) Gametype, Gametype);
      }
      if (hasGameversion) {
        output.WriteString(2, field_names[1], Gameversion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGametype) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Gametype);
        }
        if (hasGameversion) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Gameversion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GamePermRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GamePermRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GamePermRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GamePermRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GamePermRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GamePermRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GamePermRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GamePermRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GamePermRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GamePermRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GamePermRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GamePermRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GamePermRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GamePermRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GamePermRequest result;
      
      private GamePermRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GamePermRequest original = result;
          result = new GamePermRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GamePermRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::XReactor.GamePermRequest.Descriptor; }
      }
      
      public override GamePermRequest DefaultInstanceForType {
        get { return global::XReactor.GamePermRequest.DefaultInstance; }
      }
      
      public override GamePermRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GamePermRequest) {
          return MergeFrom((GamePermRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GamePermRequest other) {
        if (other == global::XReactor.GamePermRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGametype) {
          Gametype = other.Gametype;
        }
        if (other.HasGameversion) {
          Gameversion = other.Gameversion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gamePermRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gamePermRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.gametype_, out unknown)) {
                result.hasGametype = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasGameversion = input.ReadString(ref result.gameversion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGametype {
       get { return result.hasGametype; }
      }
      public global::XReactor.GameType Gametype {
        get { return result.Gametype; }
        set { SetGametype(value); }
      }
      public Builder SetGametype(global::XReactor.GameType value) {
        PrepareBuilder();
        result.hasGametype = true;
        result.gametype_ = value;
        return this;
      }
      public Builder ClearGametype() {
        PrepareBuilder();
        result.hasGametype = false;
        result.gametype_ = global::XReactor.GameType.WARCRAFTIII;
        return this;
      }
      
      public bool HasGameversion {
        get { return result.hasGameversion; }
      }
      public string Gameversion {
        get { return result.Gameversion; }
        set { SetGameversion(value); }
      }
      public Builder SetGameversion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameversion = true;
        result.gameversion_ = value;
        return this;
      }
      public Builder ClearGameversion() {
        PrepareBuilder();
        result.hasGameversion = false;
        result.gameversion_ = "";
        return this;
      }
    }
    static GamePermRequest() {
      object.ReferenceEquals(global::XReactor.Proto.GamePermRequest.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
