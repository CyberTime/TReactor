// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace XReactor {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class MhReport {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_XReactor_MhReport__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::XReactor.MhReport, global::XReactor.MhReport.Builder> internal__static_XReactor_MhReport__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static MhReport() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Cg5NaFJlcG9ydC5wcm90bxIIWFJlYWN0b3IidAoITWhSZXBvcnQSEwoLTWFj" + 
            "aGluZU5hbWUYASACKAkSEQoJUHJvY2Vzc2VzGAIgAygJEgwKBFRpbWUYAyAC" + 
            "KAkSDgoGTWhUeXBlGAQgAigJEhAKCEdhbWVOYW1lGAUgAigJEhAKCEdhbWVU" + 
            "aW1lGAYgAigJQgJIAQ==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_XReactor_MhReport__Descriptor = Descriptor.MessageTypes[0];
          internal__static_XReactor_MhReport__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::XReactor.MhReport, global::XReactor.MhReport.Builder>(internal__static_XReactor_MhReport__Descriptor,
                  new string[] { "MachineName", "Processes", "Time", "MhType", "GameName", "GameTime", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MhReport : pb::GeneratedMessage<MhReport, MhReport.Builder> {
    private MhReport() { }
    private static readonly MhReport defaultInstance = new MhReport().MakeReadOnly();
    private static readonly string[] _mhReportFieldNames = new string[] { "GameName", "GameTime", "MachineName", "MhType", "Processes", "Time" };
    private static readonly uint[] _mhReportFieldTags = new uint[] { 42, 50, 10, 34, 18, 26 };
    public static MhReport DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MhReport DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MhReport ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::XReactor.Proto.MhReport.internal__static_XReactor_MhReport__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MhReport, MhReport.Builder> InternalFieldAccessors {
      get { return global::XReactor.Proto.MhReport.internal__static_XReactor_MhReport__FieldAccessorTable; }
    }
    
    public const int MachineNameFieldNumber = 1;
    private bool hasMachineName;
    private string machineName_ = "";
    public bool HasMachineName {
      get { return hasMachineName; }
    }
    public string MachineName {
      get { return machineName_; }
    }
    
    public const int ProcessesFieldNumber = 2;
    private pbc::PopsicleList<string> processes_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ProcessesList {
      get { return pbc::Lists.AsReadOnly(processes_); }
    }
    public int ProcessesCount {
      get { return processes_.Count; }
    }
    public string GetProcesses(int index) {
      return processes_[index];
    }
    
    public const int TimeFieldNumber = 3;
    private bool hasTime;
    private string time_ = "";
    public bool HasTime {
      get { return hasTime; }
    }
    public string Time {
      get { return time_; }
    }
    
    public const int MhTypeFieldNumber = 4;
    private bool hasMhType;
    private string mhType_ = "";
    public bool HasMhType {
      get { return hasMhType; }
    }
    public string MhType {
      get { return mhType_; }
    }
    
    public const int GameNameFieldNumber = 5;
    private bool hasGameName;
    private string gameName_ = "";
    public bool HasGameName {
      get { return hasGameName; }
    }
    public string GameName {
      get { return gameName_; }
    }
    
    public const int GameTimeFieldNumber = 6;
    private bool hasGameTime;
    private string gameTime_ = "";
    public bool HasGameTime {
      get { return hasGameTime; }
    }
    public string GameTime {
      get { return gameTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMachineName) return false;
        if (!hasTime) return false;
        if (!hasMhType) return false;
        if (!hasGameName) return false;
        if (!hasGameTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mhReportFieldNames;
      if (hasMachineName) {
        output.WriteString(1, field_names[2], MachineName);
      }
      if (processes_.Count > 0) {
        output.WriteStringArray(2, field_names[4], processes_);
      }
      if (hasTime) {
        output.WriteString(3, field_names[5], Time);
      }
      if (hasMhType) {
        output.WriteString(4, field_names[3], MhType);
      }
      if (hasGameName) {
        output.WriteString(5, field_names[0], GameName);
      }
      if (hasGameTime) {
        output.WriteString(6, field_names[1], GameTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMachineName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MachineName);
        }
        {
          int dataSize = 0;
          foreach (string element in ProcessesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * processes_.Count;
        }
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Time);
        }
        if (hasMhType) {
          size += pb::CodedOutputStream.ComputeStringSize(4, MhType);
        }
        if (hasGameName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, GameName);
        }
        if (hasGameTime) {
          size += pb::CodedOutputStream.ComputeStringSize(6, GameTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MhReport ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MhReport ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MhReport ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MhReport ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MhReport ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MhReport ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MhReport ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MhReport ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MhReport ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MhReport ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MhReport MakeReadOnly() {
      processes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MhReport prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MhReport, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MhReport cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MhReport result;
      
      private MhReport PrepareBuilder() {
        if (resultIsReadOnly) {
          MhReport original = result;
          result = new MhReport();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MhReport MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::XReactor.MhReport.Descriptor; }
      }
      
      public override MhReport DefaultInstanceForType {
        get { return global::XReactor.MhReport.DefaultInstance; }
      }
      
      public override MhReport BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MhReport) {
          return MergeFrom((MhReport) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MhReport other) {
        if (other == global::XReactor.MhReport.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMachineName) {
          MachineName = other.MachineName;
        }
        if (other.processes_.Count != 0) {
          result.processes_.Add(other.processes_);
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasMhType) {
          MhType = other.MhType;
        }
        if (other.HasGameName) {
          GameName = other.GameName;
        }
        if (other.HasGameTime) {
          GameTime = other.GameTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mhReportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mhReportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMachineName = input.ReadString(ref result.machineName_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.processes_);
              break;
            }
            case 26: {
              result.hasTime = input.ReadString(ref result.time_);
              break;
            }
            case 34: {
              result.hasMhType = input.ReadString(ref result.mhType_);
              break;
            }
            case 42: {
              result.hasGameName = input.ReadString(ref result.gameName_);
              break;
            }
            case 50: {
              result.hasGameTime = input.ReadString(ref result.gameTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMachineName {
        get { return result.hasMachineName; }
      }
      public string MachineName {
        get { return result.MachineName; }
        set { SetMachineName(value); }
      }
      public Builder SetMachineName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMachineName = true;
        result.machineName_ = value;
        return this;
      }
      public Builder ClearMachineName() {
        PrepareBuilder();
        result.hasMachineName = false;
        result.machineName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> ProcessesList {
        get { return PrepareBuilder().processes_; }
      }
      public int ProcessesCount {
        get { return result.ProcessesCount; }
      }
      public string GetProcesses(int index) {
        return result.GetProcesses(index);
      }
      public Builder SetProcesses(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.processes_[index] = value;
        return this;
      }
      public Builder AddProcesses(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.processes_.Add(value);
        return this;
      }
      public Builder AddRangeProcesses(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.processes_.Add(values);
        return this;
      }
      public Builder ClearProcesses() {
        PrepareBuilder();
        result.processes_.Clear();
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public string Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = "";
        return this;
      }
      
      public bool HasMhType {
        get { return result.hasMhType; }
      }
      public string MhType {
        get { return result.MhType; }
        set { SetMhType(value); }
      }
      public Builder SetMhType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMhType = true;
        result.mhType_ = value;
        return this;
      }
      public Builder ClearMhType() {
        PrepareBuilder();
        result.hasMhType = false;
        result.mhType_ = "";
        return this;
      }
      
      public bool HasGameName {
        get { return result.hasGameName; }
      }
      public string GameName {
        get { return result.GameName; }
        set { SetGameName(value); }
      }
      public Builder SetGameName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameName = true;
        result.gameName_ = value;
        return this;
      }
      public Builder ClearGameName() {
        PrepareBuilder();
        result.hasGameName = false;
        result.gameName_ = "";
        return this;
      }
      
      public bool HasGameTime {
        get { return result.hasGameTime; }
      }
      public string GameTime {
        get { return result.GameTime; }
        set { SetGameTime(value); }
      }
      public Builder SetGameTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameTime = true;
        result.gameTime_ = value;
        return this;
      }
      public Builder ClearGameTime() {
        PrepareBuilder();
        result.hasGameTime = false;
        result.gameTime_ = "";
        return this;
      }
    }
    static MhReport() {
      object.ReferenceEquals(global::XReactor.Proto.MhReport.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
